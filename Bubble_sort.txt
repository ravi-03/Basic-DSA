#include<bits/stdc++.h>
#define debug(x) cout<<#x<<"::"<<x<<endl;
using namespace std;
typedef long long ll;

void bubble_sort(int *arr,int n)
{
	for(int i=n-1;i>=0;i--)//Pass number= n-i
	{
		int xchanges=0;
		//Bring largest of arr[0....i] to position i
		for(int j=0;j<i;j++)
		{
			if(arr[j]>arr[j+1])
			{
				swap(arr[j],arr[j+1]);
				xchanges++;
			}
		}
		if(!xchanges)//If arr[0....i] is already sorted
		{
			break;
		}
	}
}

void print_arr(int *arr,int n)
{
	for(int i=0;i<n;i++)
	{
		cout<<arr[i]<<' ';
	}
	cout<<'\n';
}

void solve()
{
	int n;
	cin>>n;
	int arr[n];
	for(int i=0;i<n;i++)
	{
		cin>>arr[i];
	}

	cout<<"Before Bubble_sort:  ";
	print_arr(arr,n);

	bubble_sort(arr,n);

	cout<<"After Bubble_sort:  ";
	print_arr(arr,n);
}

int main()
{
	#ifndef ONLINE_JUDGE
	freopen("input.txt","r",stdin);
	freopen("output.txt","w",stdout);
	#endif
	int t;
	t=1;
	while(t--)
		solve();
	return 0;
}


/*****Analysis*****
Best Case: When given array is already sorted. O(n)
Worst Case: When given array is reverse sorted. O(n^2)
Average Case: O(n^2) can bound it. Number of passes=O(n). Number of Comparisons=O(n^2).

** Bubble_sort is a STABLE SORT.
** Bubble_sort is an IN-PLACE SORT.
** Space Complexity: O(1)
*/