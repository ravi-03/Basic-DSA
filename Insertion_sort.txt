#include<bits/stdc++.h>
#define debug(x) cout<<#x<<"::"<<x<<endl;
using namespace std;
typedef long long ll;

void insertion_sort(int *arr, int size)
{
	//Initiall arr[0] is in sorted part and rest i.e. arr[1....size-1] are in unsorted part.
	for(int i=1;i<size;i++)
	{
		int key=arr[i];
		int j;
		//picking one element arr[i] and placing it in its proper place in sorted part.
		//so size of sorted part inc by 1 and size of unsorted dec by 1 in every iteration of outer loop.
		for(j=i-1; key<arr[j] && j>=0; j--)
		{
			arr[j+1]=arr[j];
		}
		arr[j+1]=key;
	}
}

void print_arr(int *arr,int size)
{
	for(int i=0;i<size;i++)
	{
		cout<<arr[i]<<' ';
	}
	cout<<'\n';
}

void solve()
{
	int n;
	cin>>n;
	int arr[n];
	for(int i=0;i<n;i++)
	{
		cin>>arr[i];
	}	
	cout<<"Before Insertion_sort::  ";
	print_arr(arr,n);

	insertion_sort(arr,n);

	cout<<"After Insertion_sort::  ";
	print_arr(arr,n);

}

int main()
{
	#ifndef ONLINE_JUDGE
	freopen("input.txt","r",stdin);
	freopen("output.txt","w",stdout);
	#endif
	int t;
	t=1;
	while(t--)
		solve();
	return 0;
}

/*****Analysis******
Best Case: When array given is in sorted order. O(n)
Worst Case: When array given is reverse sorted. O(n^2)
Average Case: O(n^2)

** Insertion_sort is a STABLE SORT (order of duplicates is not disturbed)
** Insertion_sort is an IN-PLACE SORT (no auxilary space)
** Space Complexity : O(1)
*/