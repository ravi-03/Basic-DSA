#include<bits/stdc++.h>
#define debug(x) cout<<#x<<"::"<<x<<endl;
using namespace std;
typedef long long ll;

//WE ARE USING ONE BASED INDEXING

//insertion into heap
void restoreUp(int arr[],int i)//O(log n)
{
	int k=arr[i];
	int par=i/2;
	while(k>arr[par]) //If we have not used sentinel value, cond. should be while(k>arr[par] && par>=1)
	{
		arr[i]=arr[par];
		i=par;
		par=i/2;
	}
	arr[i]=k;
}
void insert(int num, int arr[], int *h_size)
{
	(*h_size)++;
	arr[*h_size]=num;
	restoreUp(arr,*h_size);
}


//deletion from heap (of root node)
void restoreDown(int *arr, int i, int size)//O(log n). This is sometimes also called MaxHeapify.
{
	int lchild=2*i;
	int rchild=lchild+1;
	int k=arr[i];
	while(rchild<=size)
	{
		if(k>arr[lchild] && k>arr[rchild])
		{
			arr[i]=k;
			return;
		}
		else if(arr[lchild]>arr[rchild])
		{
			arr[i]=arr[lchild];
			i=lchild;
		}
		else
		{
			arr[i]=arr[rchild];
			i=rchild;
		}
		lchild=2*i;
		rchild=lchild+1;
	}
	//if number of nodes is even
	if(lchild==size && k<arr[lchild])
	{
		arr[i]=arr[lchild];
		i=lchild;
	}
	arr[i]=k;
}
int delete_root(int arr[],int *h_size)
{
	int maxi=arr[1];//storing root value
	arr[1]=arr[*h_size];
	(*h_size)--;
	restoreDown(arr,1,*h_size);
	return maxi;
}


//Building a heap from a given array
void build_heap(int *arr, int size)
{
	//i=1 is root of heap. Initially we assume our heap to be empty.
	for(int i=2;i<=size;i++)//T.C.:: O(n*log n)
	{
		restoreUp(arr,i);//Top-down approach
	}
}
void build_heap2(int *arr,int size)//T.C.:: O(n). This is sometimes called MaxHeapify
{
	//we start working from the first non leaf node of heap
	for(int i=size/2;i>=1;i--)
	{
		restoreDown(arr,i,size);//Bottom-up approach
	}
}
//Heaps may differ, but both holds the heap properties.


//printing the heap
void print_heap(int *arr,int size)
{
	for(int i=1;i<=size;i++)
	{
		cout<<arr[i]<<' ';
	}
	cout<<'\n';
}


void solve()
{
	int n;
	cin>>n;
	int arr[100005];
	arr[0]=INT_MAX;//very large sentinel value
	for(int i=1;i<=n;i++)
	{
		cin>>arr[i];
	}
	int arr2[n+1];
	arr2[0]=INT_MAX;
	for(int i=1;i<=n;i++)
	{
		arr2[i]=arr[i];
	}

	build_heap(arr,n);
	print_heap(arr,n);

	build_heap2(arr2,n);
	print_heap(arr2,n);
}

int main()
{
	#ifndef ONLINE_JUDGE
	freopen("input.txt","r",stdin);
	freopen("output.txt","w",stdout);
	#endif
	int t;
	t=1;
	while(t--)
		solve();
	return 0;
}

/****Analysis*****
Q. Why build_heap2 (Bottom up approach) is taking O(n)?
sol: https://stackoverflow.com/questions/36226714/why-is-the-top-down-approach-of-heap-construction-less-efficient-than-bottom-up
*/
